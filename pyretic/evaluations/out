{'test': 'congested_link', 'm': '15', 'n': '15'}
31.7886559963
         51330953 function calls (48845353 primitive calls) in 31.789 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
  2685307    4.331    0.000    6.936    0.000 language.py:418(map_check)
  2906399    2.065    0.000    9.324    0.000 language.py:415(covers)
  2968565    1.788    0.000   11.113    0.000 classifier.py:405(<lambda>)
  7215415    1.302    0.000    1.302    0.000 {isinstance}
  3307530    1.293    0.000    1.831    0.000 util.py:103(items)
   101394    0.986    0.000    2.662    0.000 re.py:378(re_nub)
249041/3629    0.945    0.000   17.998    0.005 {reduce}
395727/73264    0.829    0.000    2.901    0.000 path.py:2139(match_tree_intersect)
  3333110    0.766    0.000    0.766    0.000 util.py:118(__getitem__)
  3187788    0.708    0.000    0.708    0.000 util.py:94(__contains__)
  1467636    0.670    0.000    0.856    0.000 re.py:163(__eq__)
  1460369    0.636    0.000    1.487    0.000 re.py:87(__ne__)
   101394    0.606    0.000    1.461    0.000 {sorted}
  1460369    0.594    0.000    0.855    0.000 re.py:375(<lambda>)
   149897    0.571    0.000    4.471    0.000 classifier.py:291(_cross_act)
   126566    0.550    0.000    1.861    0.000 language.py:361(intersect)
281111/72335    0.538    0.000    4.634    0.000 path.py:2224(match_tree_tree_intersect)
  3307562    0.538    0.000    0.538    0.000 {method 'items' of 'dict' objects}
   110909    0.523    0.000    5.495    0.000 re.py:458(smart_alter)
   132060    0.516    0.000    0.582    0.000 classifier.py:107(__init__)
   792556    0.492    0.000    0.664    0.000 language.py:258(__eq__)
    13313    0.471    0.000   17.916    0.001 classifier.py:225(__rshift__)
369310/10084    0.452    0.000    1.926    0.000 {method 'join' of 'str' objects}
   193763    0.392    0.000    0.612    0.000 path.py:2054(match_neg_intersect)
353105/125126    0.377    0.000    2.370    0.000 path.py:2087(match_neg_tree_intersect)
   149897    0.372    0.000    1.050    0.000 classifier.py:260(_sequence_actions)
   155732    0.310    0.000    0.494    0.000 path.py:2038(match_intersect)
  1173235    0.304    0.000    0.304    0.000 language.py:1132(__eq__)
187435/149720    0.293    0.000    1.623    0.000 path.py:2167(match_neg_tree_tree_intersect)
   152986    0.291    0.000    0.463    0.000 path.py:2069(match_neg_neg_intersect)
     2700    0.271    0.000   31.630    0.012 path.py:293(get_re_tree)
  1460369    0.260    0.000    0.260    0.000 re.py:167(sort_key)
    13313    0.254    0.000   12.363    0.001 classifier.py:401(remove_shadowed_cover_single)
   245412    0.246    0.000    0.346    0.000 classifier.py:156(append)
93747/3392    0.233    0.000    5.180    0.002 path.py:261(replace_node)
972007/757836    0.227    0.000    0.325    0.000 {len}
    12504    0.217    0.000    0.370    0.000 language.py:455(generate_classifier)
124784/5042    0.195    0.000    1.970    0.000 util.py:142(repr_plus)
124784/5042    0.194    0.000    1.992    0.000 language.py:1129(__repr__)
  1474644    0.194    0.000    0.194    0.000 {method 'append' of 'list' objects}
   119742    0.190    0.000    0.450    0.000 language.py:446(__repr__)
   215038    0.175    0.000    0.442    0.000 re.py:459(r_empty_helper)
   214171    0.174    0.000    0.490    0.000 language.py:357(__eq__)
268078/23552    0.173    0.000    2.014    0.000 {repr}
   366414    0.169    0.000    0.242    0.000 util.py:97(keys)
   150498    0.167    0.000    0.284    0.000 copy.py:66(copy)
121570/121541    0.166    0.000    0.493    0.000 {map}
   489052    0.149    0.000    0.149    0.000 util.py:139(<genexpr>)
   149897    0.148    0.000    4.619    0.000 classifier.py:301(_cross)
   149897    0.148    0.000    0.302    0.000 classifier.py:231(_commute_test)
369310/129826    0.148    0.000    1.733    0.000 util.py:145(<genexpr>)
  1699775    0.144    0.000    0.144    0.000 {id}
22892/16640    0.143    0.000    2.392    0.000 path.py:2113(match_intersect_tree_intersect)
   124784    0.126    0.000    0.551    0.000 util.py:138(indent_str)
   116244    0.104    0.000    0.104    0.000 re.py:182(__init__)
   101394    0.101    0.000    0.191    0.000 re.py:238(__init__)
   214171    0.098    0.000    0.130    0.000 util.py:134(__len__)
23139/12132    0.095    0.000    2.200    0.000 path.py:2197(match_intersect_tree_tree_intersect)
    28680    0.086    0.000    4.799    0.000 path.py:109(get_overlap_mode)
     6252    0.085    0.000    0.175    0.000 language.py:476(translate_virtual_fields)
   196008    0.085    0.000    0.133    0.000 re.py:426(is_negated_empty)
   215038    0.084    0.000    0.135    0.000 re.py:423(is_empty)
12504/6252    0.081    0.000    0.784    0.000 language.py:326(__init__)
    41273    0.081    0.000    0.081    0.000 language.py:1112(__init__)
   117876    0.077    0.000    0.077    0.000 classifier.py:19(__init__)
   149897    0.077    0.000    0.077    0.000 copy.py:113(_copy_with_constructor)
   101394    0.077    0.000    1.538    0.000 re.py:374(re_sort)
   375366    0.077    0.000    0.077    0.000 {method 'keys' of 'dict' objects}
    12504    0.072    0.000    0.072    0.000 language.py:328(_get_processed_map)
   110909    0.071    0.000    5.566    0.000 re.py:58(__or__)
128717/128685    0.066    0.000    0.093    0.000 {hash}
   124784    0.060    0.000    0.060    0.000 {method 'splitlines' of 'str' objects}
    13469    0.059    0.000    0.059    0.000 {built-in method __new__ of type object at 0x84a640}
    13313    0.055    0.000   17.971    0.001 language.py:1299(<lambda>)
    72335    0.050    0.000    4.684    0.000 path.py:90(has_nonempty_intersection)
   386951    0.049    0.000    0.049    0.000 {method 'append' of 'collections.deque' objects}
    11069    0.047    0.000    0.246    0.000 language.py:1324(__and__)
   105133    0.046    0.000    0.124    0.000 language.py:412(__hash__)
23400/5400    0.044    0.000    0.095    0.000 re.py:486(smart_concat)
    94129    0.043    0.000    0.072    0.000 re.py:241(__eq__)
   124784    0.041    0.000    0.041    0.000 language.py:138(name)
    25008    0.039    0.000    0.054    0.000 util.py:59(__init__)
    12868    0.038    0.000    0.174    0.000 language.py:1309(__new__)
     2700    0.037    0.000    0.052    0.000 language_tools.py:100(ast_fold)
    63121    0.037    0.000    0.042    0.000 {method 'update' of 'dict' objects}
    30519    0.037    0.000    0.037    0.000 re.py:97(__init__)
10176/3392    0.036    0.000    0.162    0.000 path.py:247(new_metadata_tree)
    25736    0.034    0.000    0.128    0.000 language.py:1318(__init__)
    57031    0.033    0.000    0.042    0.000 language.py:295(__eq__)
    25736    0.033    0.000    0.091    0.000 language.py:1257(__init__)
   151099    0.032    0.000    0.032    0.000 {method 'get' of 'dict' objects}
     6252    0.029    0.000    0.053    0.000 runtime.py:1920(vhs_to_num)
     6252    0.029    0.000    0.570    0.000 language.py:450(__init__)
    20554    0.029    0.000    0.055    0.000 re.py:159(__init__)
   105133    0.027    0.000    0.027    0.000 util.py:121(__hash__)
    92866    0.026    0.000    0.026    0.000 {method 'extend' of 'collections.deque' objects}
     6252    0.025    0.000    0.689    0.000 language.py:352(generate_classifier)
    23552    0.025    0.000    2.055    0.000 language.py:214(__hash__)
     6252    0.022    0.000    0.022    0.000 {filter}
     6252    0.021    0.000    0.068    0.000 util.py:65(update)
    13950    0.021    0.000    0.034    0.000 re.py:210(__init__)
    15537    0.021    0.000    0.046    0.000 language.py:204(__invert__)
8792/5400    0.018    0.000   31.646    0.006 path.py:714(re_tree)
    13313    0.018    0.000   12.380    0.001 classifier.py:387(optimize)
     6252    0.013    0.000    0.068    0.000 runtime.py:1915(compress)
       31    0.012    0.000    5.265    0.170 path.py:241(__replace_pred__)
13342/12806    0.012    0.000    0.317    0.000 language.py:1117(compile)
     9515    0.012    0.000    0.022    0.000 re.py:146(__init__)
     2700    0.010    0.000   31.678    0.012 path.py:763(re_tree)
      450    0.009    0.000   31.773    0.071 path.py:923(re_tree)
15141/14605    0.008    0.000    0.327    0.000 language.py:1296(<lambda>)
    13252    0.007    0.000    0.009    0.000 classifier.py:118(__len__)
     2700    0.007    0.000    0.058    0.000 path.py:579(get_dyn_pols)
     3392    0.006    0.000    0.006    0.000 path.py:722(re_tree)
1828/1799    0.006    0.000   18.045    0.010 language.py:1294(generate_classifier)
    12810    0.006    0.000    0.007    0.000 path.py:82(<lambda>)
   1347/3    0.005    0.000   31.789   10.596 path.py:536(path_policy_ast_fold)
     9515    0.005    0.000    0.008    0.000 re.py:149(__eq__)
     1801    0.005    0.000   18.067    0.010 path.py:84(is_not_drop)
     1799    0.005    0.000    0.039    0.000 language.py:178(__and__)
    23552    0.005    0.000    0.005    0.000 language.py:263(__repr__)
     6252    0.005    0.000    0.007    0.000 util.py:112(iteritems)
    23331    0.004    0.000    0.004    0.000 language.py:252(intersect)
     5400    0.004    0.000    0.100    0.000 re.py:54(__xor__)
     6252    0.004    0.000    0.004    0.000 {method 'copy' of 'dict' objects}
    12504    0.003    0.000    0.003    0.000 {method 'iteritems' of 'dict' objects}
     1801    0.003    0.000   18.049    0.010 path.py:69(__get_classifier__)
      601    0.003    0.000    0.005    0.000 copy.py:306(_reconstruct)
      601    0.003    0.000    0.003    0.000 {method '__reduce_ex__' of 'object' objects}
       62    0.002    0.000    0.014    0.000 classifier.py:173(__invert__)
     6252    0.002    0.000    0.002    0.000 runtime.py:1962(map_to_vlan)
     1829    0.002    0.000    0.002    0.000 language.py:224(compile)
      900    0.002    0.000   24.136    0.027 path.py:891(re_tree)
 2025/225    0.002    0.000    0.006    0.000 path.py:558(path_ast_fold)
     2700    0.002    0.000    0.004    0.000 language_tools.py:144(add_dynamic_sub_pols)
      449    0.002    0.000    0.062    0.000 path.py:1165(__get_re_pols__)
      900    0.002    0.000    0.004    0.000 re.py:405(smart_star)
     1801    0.002    0.000    0.013    0.000 path.py:80(__is_not_drop_classifier__)
     1350    0.001    0.000    0.002    0.000 path.py:767(invalidate_re_tree)
      900    0.001    0.000    0.002    0.000 re.py:262(__init__)
     2025    0.001    0.000    0.003    0.000 path.py:1139(inv_atoms)
      449    0.001    0.000   31.714    0.071 path.py:1153(__prep_re_trees__)
        1    0.001    0.001   31.789   31.789 stat.py:214(profiled_func)
      900    0.001    0.000    0.005    0.000 re.py:66(__pos__)
     1202    0.001    0.000    0.001    0.000 {getattr}
      450    0.001    0.000    0.001    0.000 re.py:133(__init__)
     2700    0.000    0.000    0.000    0.000 path.py:727(invalidate_re_tree)
       65    0.000    0.000    0.058    0.001 path.py:194(__add_pred__)
      602    0.000    0.000    0.000    0.000 {hasattr}
     1358    0.000    0.000    0.000    0.000 weakref.py:48(remove)
      449    0.000    0.000    0.007    0.000 path.py:1135(__invalidate_re_trees__)
      601    0.000    0.000    0.001    0.000 copy_reg.py:92(__newobj__)
       31    0.000    0.000    0.036    0.001 path.py:212(__del_pred__)
    62/46    0.000    0.000    0.297    0.006 language.py:1157(generate_classifier)
       65    0.000    0.000    0.000    0.000 path.py:228(__new_symbol__)
       65    0.000    0.000    0.000    0.000 path.py:222(__new_token__)
        1    0.000    0.000   31.789   31.789 <string>:1(<module>)
       32    0.000    0.000    0.000    0.000 language.py:86(compile)
        1    0.000    0.000   31.789   31.789 path.py:1192(compile)
        2    0.000    0.000    0.000    0.000 language.py:236(generate_classifier)
        2    0.000    0.000    0.000    0.000 path.py:373(clear)
        1    0.000    0.000    0.000    0.000 copy_reg.py:95(_slotnames)
        3    0.000    0.000    0.000    0.000 {time.time}
        1    0.000    0.000    0.000    0.000 {method 'get' of 'dictproxy' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


